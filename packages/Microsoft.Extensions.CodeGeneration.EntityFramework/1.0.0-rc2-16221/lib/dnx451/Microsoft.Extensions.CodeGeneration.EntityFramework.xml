<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Extensions.CodeGeneration.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Extensions.CodeGeneration.EntityFramework.ContextProcessingResult">
            <summary>
            Represents the result of obtaining EF metadata for a context and a model type.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.ContextProcessingResult.ContextProcessingStatus">
            <summary>
            An enumeration representing what kind of processing was done for the
            given context name.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.ContextProcessingResult.ModelMetadata">
            <summary>
            EF metadata to be used for generating views / controller code.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.CodeGeneration.EntityFramework.ContextProcessingStatus">
            <summary>
            Represents the status of EF DbContext processing.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.CodeGeneration.EntityFramework.ContextProcessingStatus.ContextAvailable">
            <summary>
            No edits were required to DbContext
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.CodeGeneration.EntityFramework.ContextProcessingStatus.ContextAdded">
            <summary>
            A new context was created and succefully configured through DI.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.CodeGeneration.EntityFramework.ContextProcessingStatus.ContextAddedButRequiresConfig">
            <summary>
            A new context was created however requires some more configuration changes for DI to work.
            </summary>
        </member>
        <member name="F:Microsoft.Extensions.CodeGeneration.EntityFramework.ContextProcessingStatus.ContextEdited">
            <summary>
            A context was available but it was edited to add DbSet property.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.CodeGeneration.EntityFramework.DbContextEditorServices.EditStartupForNewContext(Microsoft.Extensions.CodeGeneration.ModelType,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="startUp"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Extensions.CodeGeneration.EntityFramework.EntityFrameworkServices.PersistSyntaxTree(Microsoft.CodeAnalysis.SyntaxTree)">
            <summary>
            Writes the DbContext to disk using the given Roslyn SyntaxTree.
            The method expects that SyntaxTree has a file path associated with it.
            Handles both writing a new file and editing an existing file.
            </summary>
            <param name="newTree"></param>
        </member>
        <member name="M:Microsoft.Extensions.CodeGeneration.EntityFramework.IEntityFrameworkService.GetModelMetadata(System.String,Microsoft.Extensions.CodeGeneration.ModelType)">
            <summary>
            Gets the EF metadata for given context and model.
            Method takes in full type name of context and if there is no context with that name,
            attempts to create one. When creating a context, the method also tries to modify Startup
            code to register the new context through DI.
            When the given context is available but there is no DbSet property of given model type
            context will be edited to add the property.
            The method throws exceptions if there are any errors running EF code to get the EF metadata.
            And no changes are written to disk.
            When the method successfully returned, it's guranteed to have ModelMetadata present
            in the return value. Before returning all the code edits are persisted to disk.
            </summary>
            <param name="dbContextFullTypeName">Full name (including namespace) of the context class.</param>
            <param name="modelTypeName">Model type for which the EF metadata has to be returned.</param>
            <returns>Returns <see cref="T:Microsoft.Extensions.CodeGeneration.EntityFramework.ContextProcessingResult"/>.</returns>
        </member>
        <member name="T:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.DbContextCreationError">
            <summary>
               Looks up a localized string similar to There was an error creating a DbContext :{0}.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.DbContextCreationError_fileExists">
            <summary>
               Looks up a localized string similar to There was an error creating a DbContext, the file {0} already exists.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.DbContextCreationError_noTypeReturned">
            <summary>
               Looks up a localized string similar to There was an error creating/modifying a DbContext, there was no type returned after compiling the new assembly successfully.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.DbContextTypeNotFound">
            <summary>
               Looks up a localized string similar to Could not get the reflection type for DbContext : {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.EnsureStartupClassExists">
            <summary>
               Looks up a localized string similar to Make sure there is a Startup class and a ConfigureServices method and Configuration property in it..
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.FailedToEditStartup">
            <summary>
               Looks up a localized string similar to Scaffolding failed to edit Startup class to register the new Context using Dependency Injection..
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.ModelTypeNotFound">
            <summary>
               Looks up a localized string similar to Could not get the reflection type for Model : {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.NoEntityOfTypeInDbContext">
            <summary>
               Looks up a localized string similar to There is no entity type {0} on DbContext {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.ScaffoldingNeedsToRerun">
            <summary>
               Looks up a localized string similar to Scaffolding should be run again since it needs to reload the application with the added package reference - just run the previous command one more time..
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.TemplateProcessingError">
            <summary>
               Looks up a localized string similar to There was an error running the template {0}: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.MessageStrings.TypeCastToDbContextFailed">
            <summary>
               Looks up a localized string similar to Instance of type {0} could not be cast to DbContext.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.EntityFramework.ModelMetadata.Navigations">
            <summary>
            Only navigations that are dependent and has all properties defined
            in code (non-shadow properties) are returned as part of this.
            Typically this is used to create code for drop down lists
            to choose values from principal entity.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.CodeGeneration.EntityFramework.RoslynCodeEditUtilities.AddUsingDirectiveIfNeeded(System.String,Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax)">
            <summary>
            Adds a using directive if one doesn't already exist at the top of file
            after existing using directives.
            
            Does not handle the scenarios where usings are defined within an inner node of
            given root node, ex, if the root node is CompilationUnit and usings are defined
            within a Namespace Declaration instead of top of the file, the new using is
            just added at the top of the file.
            </summary>
            <param name="namespaceName">The namespace to be added.</param>
            <param name="rootNode">Parent syntax node for which the childs are examined
            to see if a using with the given namespace already exists</param>
            <returns>A new syntax node containing the new using statement as an immediate
            child of given rootNode. If the using statement is already present, the rootNode
            is returned. Otherwise, a new statement is added at the end of existing
            usings and the new node is returned.</returns>
        </member>
        <member name="M:Microsoft.Extensions.CodeGeneration.EntityFramework.TypeUtil.GetShortTypeName(System.Type)">
            <summary>
            An approach to get meaninful short type names for a given type in C#.
            Handles most known cases, refer to tests in TypeUtilTests.cs
            Other potential approach is to use CodeDom (CodeTypeReference)
            with the help of RegEx however
            CodeDom is not available in CoreClr and hence I chose this approach.
            Of course the method only works for C# language.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.CodeGeneration.Resource">
            <summary>
               A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.Resource.ResourceManager">
            <summary>
               Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.Resource.Culture">
            <summary>
               Overrides the current thread's CurrentUICulture property for all
               resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.Resource.NullParamError">
            <summary>
               Looks up a localized string similar to Parameter &apos;{0}&apos; cannot be null or empty..
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.CodeGeneration.Resource.UnexpectedTypeLibraryForTemplates">
            <summary>
               Looks up a localized string similar to Unexpected type of library information for template folders.
            </summary>
        </member>
    </members>
</doc>
