using IntelliTect.Coalesce.CodeGeneration.Generation;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.IO;
using System.Linq;
using IntelliTect.Coalesce.Utilities;

namespace IntelliTect.Coalesce.CodeGeneration.Knockout.Generators
{
    public class TsReferencesFile : StringBuilderFileGenerator<List<IGenerator>>
    {
        public TsReferencesFile(GeneratorServices services, ILoggerFactory loggerFactory) : base(services) { }

        public override Task<string> BuildOutputAsync()
        {
            var b = new TypeScriptCodeBuilder();
            b.Line();
            b.Line();
            b.Line("// This file is automatically generated.");
            b.Line("// It is not in the generated folder for ease-of-use (no relative paths).");
            b.Line("// This file must remain in place relative to the generated scripts (<WebProject>/Scripts/Generated).");
            b.Line();
            b.Line();
            b.Line($"/// <reference path=\"coalesce.dependencies.d.ts\" />");

            foreach (var referencePath in Model.Select(m => m.OutputPath).OrderBy(p => p))
            {
                // https://stackoverflow.com/a/1766773/2465631
                Uri referencedFilePath = new Uri(referencePath);
                Uri referenceFile = new Uri(this.OutputPath);
                Uri diff = referenceFile.MakeRelativeUri(referencedFilePath);
                string relPath = diff.OriginalString;

                b.Line($"/// <reference path=\"{relPath}\" />");
            }

            return Task.FromResult(b.ToString());
        }
    }
}
