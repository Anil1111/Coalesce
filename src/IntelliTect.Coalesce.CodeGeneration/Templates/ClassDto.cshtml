@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using IntelliTect.Coalesce.TypeDefinition
@using IntelliTect.Coalesce.CodeGeneration.Utilities
@using Microsoft.VisualStudio.Web.CodeGeneration
@{
    ModelType contextInfo = Model.ContextInfo;
    ClassViewModel model = Model.Model;
    string namespaceName = Model.Namespace;
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        namespaceName += "." + Model.AreaName;
    }

    var namespaces = new List<string>();
    namespaces.Add("IntelliTect.Coalesce.Interfaces");
    namespaces.Add("IntelliTect.Coalesce.Mapping");
    namespaces.Add("IntelliTect.Coalesce.Models");
    namespaces.Add("Newtonsoft.Json");
    namespaces.Add("System");
    namespaces.Add("System.Linq");
    namespaces.Add("System.Collections.Generic");
    namespaces.Add("System.Security.Claims");
    namespaces.Add($"{namespaceName}.Models");
}
@foreach (var ns in ReflectionRepository.Namespaces.Where(f => f != "System"))
{
    if (!namespaces.Contains(ns)) { namespaces.Add(ns); }
}
@foreach (var prop in model.Properties)
{
    var ns = prop.Type.PureType.FullNamespace;
    if (!ns.StartsWith("System"))
    {
        if (!namespaces.Contains(ns)) { namespaces.Add(ns); }
    }
}
@foreach (var ns in namespaces)
{
@:using @ns;
}

using static @(model.Namespace).@(model.Name);

namespace @(namespaceName).Models
{
    public partial class @(model.Name)DtoGen : GeneratedDto<@(model.Name), @(model.Name)DtoGen>
        , IClassDto<@(model.Name), @(model.Name)DtoGen>
    {
        public @(model.Name)DtoGen() { }

        @foreach (PropertyViewModel prop in model.Properties.Where(p => p.CanRead && p.HasViewModelProperty))
        {
        @:public @prop.Type.NullableTypeForDto @prop.Name { get; set; }
        }

        // Create a new version of this object or use it from the lookup.
        public static @(model.Name)DtoGen Create(@(model.Name) obj, ClaimsPrincipal user = null, string includes = null,
                                   @("Dictionary<object, object>") objects = null) {
            // Return null of the object is null;
            if (obj == null) return null;
                        
            if (objects == null) objects = new @("Dictionary<object, object>")();

            includes = includes ?? "";

            // Applicable includes for @(model.Name)
            @(model.DtoIncludesAsCS())

            // Applicable excludes for @(model.Name)
            @(model.DtoExcludesAsCS())

            // Applicable roles for @(model.Name)
            @(model.PropertyRolesAsCS())



            // See if the object is already created.
            if (objects.ContainsKey(obj)) 
                return (@(model.Name)DtoGen)objects[obj];

            var newObject = new @(model.Name)DtoGen();
            objects.Add(obj, newObject);
            // Fill the properties of the object.
            @foreach (var prop in model.Properties.Where(p => p.CanRead && p.HasViewModelProperty))
            {
                @prop.ObjToDtoPropertySetter("newObject")
            }            
            return newObject;
        }

        // Instance constructor because there is no way to implement a static interface in C#. And generic constructors don't take arguments.
        public @(model.Name)DtoGen CreateInstance(@(model.Name) obj, ClaimsPrincipal user = null, string includes = null,
                                @("Dictionary<object, object>") objects = null) {
            return Create(obj, user, includes, objects);
        }

        // Updates an object from the database to the state handed in by the DTO.
        public void Update(@(model.Name) entity, ClaimsPrincipal user = null, string includes = null)
        {
            includes = includes ?? "";

            if (OnUpdate(entity, user, includes)) return;

            // Applicable includes for @(model.Name)
            @(model.DtoIncludesAsCS())

            // Applicable excludes for @(model.Name)
            @(model.DtoExcludesAsCS())

            // Applicable roles for @(model.Name)
            @(model.PropertyRolesAsCS())

            @foreach (var prop in model.Properties.Where(p => p.CanWrite && p.HasViewModelProperty))
            {
                @prop.DtoToObjPropertySetter()
            }
        }

        public void SecurityTrim(ClaimsPrincipal user = null, string includes = null)
        {
            if (OnSecurityTrim(user, includes)) return;

            // Applicable includes for @(model.Name)
            @(model.DtoIncludesAsCS())

            // Applicable excludes for @(model.Name)
            @(model.DtoExcludesAsCS())

            // Applicable roles for @(model.Name)
            @(model.PropertyRolesAsCS())

            @foreach (var prop in model.Properties.Where(p => p.CanRead && p.HasViewModelProperty))
                {
                @prop.ObjToDtoSecurityTrimmer()
            }
        }
    }
}
