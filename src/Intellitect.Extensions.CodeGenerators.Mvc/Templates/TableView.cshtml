@inherits Microsoft.Extensions.CodeGeneration.Templating.RazorTemplateBase
@using Intellitect.ComponentModel.TypeDefinition
@using Intellitect.Extensions.CodeGenerators.Mvc.Utilities
@using Microsoft.Extensions.CodeGeneration
@using Intellitect.ComponentModel.Utilities
@using Intellitect.ComponentModel.DataAnnotations
@using Intellitect.ComponentModel.Helpers
@{
    ModelType contextInfo = Model.ContextInfo;
    ClassViewModel model = Model.Model;
    string listViewModelsNamespace = "ListViewModels";
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        listViewModelsNamespace = Model.AreaName + "." + listViewModelsNamespace;
    }
    if (!string.IsNullOrWhiteSpace(Model.ModulePrefix))
    {
        listViewModelsNamespace = Model.ModulePrefix + "." + listViewModelsNamespace;
    }
}
@@using Intellitect.ComponentModel.Helpers
@@{ ViewBag.Fluid = true; }

<div class="panel panel-default">
    <div class="panel-heading">
        <div class="btn-group pull-right">
            @{
                if (model.IsCreateAllowed)
                {
                @:<a href="~/@(model.ControllerName)/CreateEdit?@@(ViewBag.Query)" role="button" class="btn btn-sm btn-default ">Create</a>
                }
                <button data-bind="click:load" class="btn btn-sm btn-default ">Refresh</button>
                @:@@if (ViewBag.Editable)
                @:{
                @:<a href="~/@(model.ControllerName)/Table?@@(ViewBag.Query)" role="button" class="btn btn-sm btn-default ">Read-only</a>
                @:}
                @:else
                @:{
                @:<a href="~/@(model.ControllerName)/TableEdit?@@ViewBag.Query" role="button" class="btn btn-sm btn-default ">Editable</a>
                @:}
            }
        </div>
        <h1 style="display:inline-block">
            @(model.Name.ToProperCase()) List
            @{
                @:<span style="font-size: .5em;"><a href="~/@(model.ControllerName)/Docs">Docs</a></span>
            }
        </h1>
        <span class="label label-info" data-bind="fadeVisible: isLoading()">Loading...</span>
        <div>
            <div style="display:inline-block; font-size: 1.1em; margin-right: 10px;">
                <i class="fa fa-arrow-circle-left" data-bind="enabled: previousPageEnabled(), click: previousPage"></i>
                Page
                <span data-bind="text: page"></span>
                of
                <span data-bind="text: pageCount"></span>
                <i class="fa fa-arrow-circle-right" data-bind="enabled: nextPageEnabled(), click: nextPage"></i>
            </div>
            <select data-bind="value:pageSize" class="form-control" style="width: 100px; display:inline-block">
                <option value="1">1</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="500">500</option>
                <option value="1000">1000</option>
                <option value="10000">10000</option>
            </select>
            <input class="form-control pull-right" style="width: 200px;" data-bind="textInput: search" placeholder="Search" />
        </div>
    </div>
    @{
        @:<table class="table table-striped @@(ViewBag.Editable ? " editable" : "" )">
    }
    <thead>
        <tr>
            @foreach (var prop in model.Properties.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsComplexType && f.HasViewModelProperty && !f.IsInternalUse).OrderBy(f => f.EditorOrder))
            {
                <th>@prop.DisplayName</th>
            }
            <th 
                @if (model.Methods.Any(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsInternalUse))
                {
                    @:style="width: 150px;"
                }
                else { 
                    @:style="width: 80px;"
                }
                >
            </th>
        </tr>
    </thead>
    <tbody>
        <!-- ko foreach: items -->
        <tr data-bind="css: {'btn-warning': errorMessage()}">
            @{
            @:@@if (@@ViewBag.Editable)
            @:{
            @foreach (var prop in model.Properties.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsComplexType && f.HasViewModelProperty && !f.IsInternalUse).OrderBy(f => f.EditorOrder))
            {
            <td>
                @Display.PropertyHelper(prop, !prop.IsReadOnly)
            </td>
            }
            @:}
            @:else
            @:{
            @foreach (var prop in model.Properties.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsComplexType && f.HasViewModelProperty && !f.IsInternalUse).OrderBy(f => f.EditorOrder))
            {
            <td>
                @Display.PropertyHelper(prop, false)
            </td>
            }
            @:}
            }
            <td>
                
                <!-- Editor buttons -->
                <div class="btn-group pull-right" role="group">
                    @if (model.Methods.Any(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsInternalUse && !f.IsStatic))
                    {
                    <!-- Action buttons -->
                    <div class="btn-group" role="group">
                        <button type="button" class="btn btn-sm btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Actions <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (var method in model.Methods.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsInternalUse && !f.IsStatic))
                            {
                                <li>@Display.MethodHelper(method)</li>
                            }
                        </ul>
                    </div>
                    }
                    <a data-bind="attr:{ href: editUrl }" class="btn btn-sm btn-default">
                        <i class="fa fa-pencil"></i>
                    </a>
                    @if (model.IsDeleteAllowed) { 
                    <button data-bind="click: deleteItemWithConfirmation" class="btn btn-sm btn-danger">
                        <i class="fa fa-remove"></i>
                    </button>
                    }

                </div>
                <div class="form-control-static" data-bind="text: errorMessage"></div>
            </td>
        </tr>
        <!-- /ko -->
    </tbody>
</table>
    
<div class="panel-body">

    @if (model.Methods.Any(f => f.IsStatic && !f.IsInternalUse))
    {
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4>Actions</h4>
            </div>
            <table class="table">
                <tr>
                    <th style="width:20%;">Action</th>
                    <th style="width:50%;">Result</th>
                    <th style="width:20%;">Successful</th>
                    <th style="width:10%;"></th>
                </tr>
                @foreach (MethodViewModel method in model.Methods.Where(f => f.IsStatic && !f.IsInternalUse))
                {
                    <tr>
                        <td>
                            <button class="btn btn-default btn-xs" data-bind="click: @method.JsVariableModal" >@method.DisplayName</button>
                        </td>
                        <td>
                            <span class="" data-bind="text: @method.JsVariableResult"></span>
                        </td>
                        <td>
                            <span class="" data-bind="text: @method.JsVariableWasSuccessful"></span>
                            <span class="" data-bind="text: @method.JsVariableMessage"></span>
                        </td>
                        <td>
                            <span class="label label-info" data-bind="fadeVisible: @(method.JsVariableIsLoading)()">Loading</span>
                        </td>
                    </tr>
                }
            </table>
        </div>
    }
</div>
</div>


@foreach (var method in model.Methods.Where(f => f.IsStatic && f.ClientParameters.Any())) { 
<!-- Modal for method: @method.Name -->
<div @($"id='method-{method.Name}'") class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">@method.Name.ToProperCase()</h4>
            </div>
            <div class="modal-body form-horizontal" data-bind="with: @(method.JsVariableArgs)">
                @foreach(ParameterViewModel arg in method.ClientParameters)
                {
                <div class="form-group">
                    <label class="col-md-4 control-label">@arg.Name.ToProperCase()</label>                
                    <div class="col-md-8">
                        <input type="text" class="form-control" data-bind="value: @(arg.CsArgumentName)">
                    </div>
                </div>    
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary btn-ok">OK</button>
            </div>
        </div><!-- /.modal-content -->
    </div><!-- /.modal-dialog -->
</div><!-- /.modal -->


}

@{
    @:@@section Scripts
    @:{

    <script>
        var @(model.ListViewModelObjectName) = new @listViewModelsNamespace.@(model.ListViewModelClassName)();
        @{
        @:@@if (ViewBag.ParentIdName != null)
        @:{
            @:@@:@(model.ListViewModelObjectName).queryString = "@@(ViewBag.ParentIdName) = @@(ViewBag.ParentId)";
        @:}
        }

        @(model.ListViewModelObjectName).isSavingAutomatically = false;
        ko.applyBindings(@(model.ListViewModelObjectName));
        @(model.ListViewModelObjectName).isSavingAutomatically = true;

        @(model.ListViewModelObjectName).includes = "Editor";
        @(model.ListViewModelObjectName).load();
    </script>
    @:}
}