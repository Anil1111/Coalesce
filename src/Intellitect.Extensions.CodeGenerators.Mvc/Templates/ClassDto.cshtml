@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Intellitect.ComponentModel.TypeDefinition
@using Intellitect.Extensions.CodeGenerators.Mvc.Utilities
@using Microsoft.VisualStudio.Web.CodeGeneration
@{
    ModelType contextInfo = Model.ContextInfo;
    ClassViewModel model = Model.Model;
    string namespaceName = Model.Namespace;
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        namespaceName += "." + Model.AreaName;
    }
}

using System;
using System.Collections.Generic;
using System.Security.Claims;
using Intellitect.ComponentModel.Interfaces;
using System.Linq;
// Model Namespaces
@foreach (var ns in ReflectionRepository.Namespaces.Where(f => f != "System"))
{
@:using @ns;
}
using static @(model.Namespace).@(model.Name);

namespace @(namespaceName).Models
{
    public partial class @(model.Name)Dto : IClassDto
    {
        public @(model.Name)Dto() { }

        public @(model.Name)Dto(ClaimsPrincipal user, @(model.Name) entity)
        {
            User = user;
            List<string> roles;
            @foreach (var rolesGroup in model.Properties.Where(p => p.CanRead).GroupBy(p => p.SecurityInfo.ReadRoles))
            {
                var secured = rolesGroup.Where(p => p.SecurityInfo.IsSecuredProperty);
                var notSecured = rolesGroup.Where(p => !p.SecurityInfo.IsSecuredProperty);
                foreach (var prop in notSecured)
                {
                    @:@prop.Name = entity.@prop.Name;
                }
                if (string.IsNullOrEmpty(rolesGroup.Key))
                {
                    foreach (var prop in secured)
                    {
                        @:@prop.Name = entity.@prop.Name;
                    }
                }
                else
                {
                    @:roles = "@rolesGroup.Key".Split(new char[] { ',' }).ToList();
                    @:if (User != null && roles.Any(r => User.IsInRole(r)))
                    @:{
                    foreach (PropertyViewModel prop in secured)
                    {
                        @:@prop.Name = entity.@prop.Name;
                    }
                    @:}
                }
            }
        }

        public ClaimsPrincipal User { get; set; }
            
        @foreach (PropertyViewModel prop in model.Properties.Where(p => p.CanRead))
        {
        @: public @prop.Type.NullableType @prop.Name { get; set; }
        }

        public void Update(object obj)
        {   
            if (User == null) throw new InvalidOperationException("Updating an entity requires the User property to be populated.");

            @(model.Name) entity = (@(model.Name))obj;

            List<string> roles;
            @foreach (var rolesGroup in model.Properties.Where(p => p.CanWrite).GroupBy(p => p.SecurityInfo.EditRoles))
            {
                var secured = rolesGroup.Where(p => p.SecurityInfo.IsSecuredProperty);
                var notSecured = rolesGroup.Where(p => !p.SecurityInfo.IsSecuredProperty);
                foreach (var prop in notSecured)
                {
                    @:entity.@prop.Name = @prop.Type.ExplicitConversionType@prop.Name;
                }
                if (!string.IsNullOrEmpty(rolesGroup.Key))
                {
                    @:roles = "@rolesGroup.Key".Split(new char[] { ',' }).ToList();
                    @:if (User != null && roles.Any(r => User.IsInRole(r)))
                    @:{
                    foreach (PropertyViewModel prop in secured)
                    {
                        @:entity.@prop.Name = @prop.Type.ExplicitConversionType@prop.Name;
                    }
                    @:}
                }
            }
        }
    }
}