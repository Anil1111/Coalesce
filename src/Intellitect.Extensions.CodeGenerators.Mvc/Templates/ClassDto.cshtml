@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Intellitect.ComponentModel.TypeDefinition
@using Intellitect.Extensions.CodeGenerators.Mvc.Utilities
@using Microsoft.VisualStudio.Web.CodeGeneration
@{
    ModelType contextInfo = Model.ContextInfo;
    ClassViewModel model = Model.Model;
    string namespaceName = Model.Namespace;
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        namespaceName += "." + Model.AreaName;
    }
}

using System;
using System.Collections.Generic;
using System.Security.Claims;
using Intellitect.ComponentModel.Interfaces;
using Intellitect.ComponentModel.Models;
using Intellitect.ComponentModel.Mapping;
using System.Linq;
using Newtonsoft.Json;
// Model Namespaces
@foreach (var ns in ReflectionRepository.Namespaces.Where(f => f != "System"))
{
@:using @ns;
}
using static @(model.Namespace).@(model.Name);

namespace @(namespaceName).Models
{
    public partial class @(model.Name)DtoGen : GeneratedDto<@(model.Name), @(model.Name)DtoGen>, IClassDto
    {
        public @(model.Name)DtoGen() { }

        @foreach (PropertyViewModel prop in model.Properties.Where(p => p.CanRead))
        {
        @: public @prop.Type.NullableTypeForDto @prop.Name { get; set; }
        }

        public void Update(object obj, ClaimsPrincipal user = null, string includes = null)
        {
            if (user == null) throw new InvalidOperationException("Updating an entity requires the User property to be populated.");

            includes = includes ?? "";

            @(model.Name) entity = (@(model.Name))obj;

            if (OnUpdate(entity, user, includes)) return;

            // Applicable includes for @(model.Name)
            @(model.DtoIncludesAsCS())

            // Applicable excludes for @(model.Name)
            @(model.DtoExcludesAsCS())

            // Applicable roles for @(model.Name)
            @(model.PropertyRolesAsCS())
    
            @foreach (var prop in model.Properties.Where(p => p.CanWrite))
            {
            @prop.DtoToObjPropertySetter()
            }
        }

        public void SecurityTrim(ClaimsPrincipal user = null, string includes = null)
        {
            if (OnSecurityTrim(user, includes)) return;

            // Applicable includes for @(model.Name)
            @(model.DtoIncludesAsCS())

            // Applicable excludes for @(model.Name)
            @(model.DtoExcludesAsCS())

            // Applicable roles for @(model.Name)
            @(model.PropertyRolesAsCS())

            @foreach (var prop in model.Properties.Where(p => p.CanRead))
            {
                @prop.ObjToDtoSecurityTrimmer()
            }
        }
    }
}
