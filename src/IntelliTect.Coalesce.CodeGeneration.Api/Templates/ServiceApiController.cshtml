@using IntelliTect.Coalesce.CodeGeneration.Templating.Razor;
@using IntelliTect.Coalesce.CodeGeneration.Api.Generators;
@using IntelliTect.Coalesce.TypeDefinition
@inherits CoalesceTemplate<ServiceApiController>
@{
    ClassViewModel model = Model.Model;
    string namespaceName = Model.Namespace;
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
        namespaceName += "." + Model.AreaName;
    }

    var namespaces = new List<string>();
    namespaces.Add("IntelliTect.Coalesce");
    namespaces.Add("IntelliTect.Coalesce.Api");
    namespaces.Add("IntelliTect.Coalesce.Api.Controllers");
    namespaces.Add("IntelliTect.Coalesce.Api.DataSources");
    namespaces.Add("IntelliTect.Coalesce.Mapping");
    namespaces.Add("IntelliTect.Coalesce.Mapping.IncludeTrees");
    namespaces.Add("IntelliTect.Coalesce.Models");
    namespaces.Add("IntelliTect.Coalesce.TypeDefinition");
    namespaces.Add("Microsoft.AspNetCore.Authorization");
    namespaces.Add("Microsoft.AspNetCore.Mvc");
    namespaces.Add("Microsoft.AspNetCore.Http");
    namespaces.Add("System");
    namespaces.Add("System.Linq");
    namespaces.Add("System.Collections.Generic");
    namespaces.Add("System.ComponentModel.DataAnnotations");
    namespaces.Add("System.Net");
    namespaces.Add("System.Threading.Tasks");
    namespaces.Add($"{namespaceName}.Models");
}

@foreach (var ns in namespaces.Where(n => !string.IsNullOrEmpty(n)).OrderBy(n => n))
{
    @:using @ns;
}

namespace @(namespaceName).Api
{
@if (model.ApiRouted) {
    if (!string.IsNullOrWhiteSpace(Model.AreaName))
    {
    @:[Route("@Model.AreaName/api/@(model.ApiRouteControllerPart)")]
    }
    else
    {
    @:[Route("api/@(model.ApiRouteControllerPart)")]
    }
}
    @{ /** No controller-level security annotation is applied - all security for service controllers is on a per-action basis. */ } 
    [ServiceFilter(typeof(IApiActionFilter))]
    public partial class @(model.ApiControllerClassName) : Controller
    {
        protected @(model.FullyQualifiedName) Service { get; }
        public @(model.ApiControllerClassName)(@(model.FullyQualifiedName) service)
        {
            Service = service;
        }

        @foreach (var method in model.ClientMethods)
        {
        <text>
        /// <summary>
        /// Method: @method.Name
        /// </summary>
        [@(method.ApiActionHttpMethodAnnotation)("@(method.Name)")]
        @(method.SecurityInfo.ExecuteAnnotation)
        @(model.ApiActionAccessModifier) virtual @method.ReturnTypeNameForApi @method.Name (@method.CsParameters)
        {
            @if (method.ResultType.HasClassViewModel ||
                (method.ResultType.PureType.HasClassViewModel && method.ResultType.IsCollection))
            {
                @:IncludeTree includeTree = null;
            }
            @if(method.ReturnType.IsVoid) {
                @:Service.@(method.Name)(@(method.CsArguments));
            } else {
                @:var methodResult = Service.@(method.Name)(@(method.CsArguments));
            }

            @(Model.MethodResultProcessBlock(method))
        }
        </text>
        }
    }
}
