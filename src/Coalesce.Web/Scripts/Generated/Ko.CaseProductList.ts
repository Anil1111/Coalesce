
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: CaseProduct
// Auto Generated by IntelliTect.Coalesce

var baseUrl = baseUrl || '';

module ListViewModels {

    export namespace CaseProductDataSources {
        export class Default extends Coalesce.DataSource<ViewModels.CaseProduct> { }
    }

    export class CaseProductList extends Coalesce.BaseListViewModel<ViewModels.CaseProduct> {
        protected modelName = "CaseProduct";

        protected apiController = "/CaseProduct";

        public modelKeyName = "caseProductId";
    
        public itemClass = ViewModels.CaseProduct;

        public query: {
            where?: string;
            caseProductId?:number;
            caseId?:number;
            productId?:number;
        } = null;
    
        /** 
            The namespace containing all possible values of this.dataSource.
        */
        public dataSources = CaseProductDataSources;

        /**
            The data source on the server to use when retrieving objects.
            Valid values are in this.dataSources.
        */
        public dataSource: Coalesce.DataSource<ViewModels.CaseProduct> = new this.dataSources.Default();

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<CaseProductList, ViewModels.CaseProduct>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig = new Coalesce.ListViewModelConfiguration<CaseProductList, ViewModels.CaseProduct>(CaseProductList.coalesceConfig);


        protected createItem = (newItem?: any, parent?: any) => new ViewModels.CaseProduct(newItem, parent);

        constructor() {
            super();
        }
    }

    export namespace CaseProductList {
        // Classes for use in method calls to support data binding for input for arguments
    }
}