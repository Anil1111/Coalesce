
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: CaseDto
// Auto Generated by IntelliTect.Coalesce

var baseUrl = baseUrl || '';

module ListViewModels {

    // Add an enum for all methods that are static and IQueryable
    export enum CaseDtoDataSources {
            Default,
            AllOpenCases,
        }
    export class CaseDtoList extends Coalesce.BaseListViewModel<CaseDtoList, ViewModels.CaseDto> {
        protected modelName = "CaseDto";

        protected apiController = "/CaseDto";

        public modelKeyName = "caseId";
        public dataSources = CaseDtoDataSources;
        public itemClass = ViewModels.CaseDto;

        public query: {
            where?: string;
            caseKey?:number;
            title?:String;
            description?:String;
            openedAt?:moment.Moment;
            assignedToId?:number;
            reportedById?:number;
            severity?:String;
            status?:number;
            devTeamAssignedId?:number;
        } = null;

        // The custom code to run in order to pull the initial datasource to use for the collection that should be returned
        public dataSource: CaseDtoDataSources = CaseDtoDataSources.Default;

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<CaseDtoList, ViewModels.CaseDto>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig = new Coalesce.ListViewModelConfiguration<CaseDtoList, ViewModels.CaseDto>(CaseDtoList.coalesceConfig);


        protected createItem = (newItem?: any, parent?: any) => new ViewModels.CaseDto(newItem, parent);

        constructor() {
            super();
        }
    }

    export namespace CaseDtoList {
        // Classes for use in method calls to support data binding for input for arguments
    }
}