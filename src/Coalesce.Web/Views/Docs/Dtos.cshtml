@{
    ViewBag.Title = "Coalesce";
    Layout = "_DocsLayout";
}
<h2>Data Transfer Objects (DTOs)</h2>
<h3>DTO Overview</h3>
<p>
    Data Transfer Objects, commonly known as DTOs, allow for transformations of data from the data store into a format more suited for transfer and use on the client side. This often means trimming properties and flattening structures to provide a leaner over-the-wire experience. The goal for Coalesce is to support this as seamlessly as possible.
</p>
<p>Coalesce supports several types of DTOs:</p>
<ul>
    <li>DTOs that are automatically generated for each POCO database object. These are controlled via annotations on the POCO.</li>
    <li>DTOs that support the standard ViewModels.</li>
    <li>DTOs that are created with IClassDto and create unique ViewModels.</li>
    <li>DTOs based on database views.</li>
</ul>

<h3>Automatically Generated DTOs</h3>
<p>
    Every POCO database class in Coalesce gets a DTO. These DTOs are used to shuttle data back and forth to the client. They are generated classes that have nullable versions of all the properties on the POCO class. Annotations and the Include infrastructure can be used to indicate which properties should be transferred to the client in which cases. By using the JSON serializer setting that does not serialize null properties, it allows for easily limiting the amount of traffic on the wire.
</p>
<p>Use this approach when you want to slightly modify an existing object either by including a new property or excluding a property. This is handy for situations where you want to consistently flatten the object model. For example going from a reference to a user in a ChangedBy property to a ChangedByName string. In this case only the ChangeByName string would be transferred, but the ChangeBy property would still be pulled from the database in order to fill the property.</p>
<p>
    See DtoExcludes and DtoIncludes in the <a asp-controller="Docs" asp-action="Annotations" asp-fragment="DtoExcludes">Annotations</a>
    section for examples.
</p>
<h3>DTOs with Standard View Models</h3>
<p>TODO: Dan fills this in.</p>
<pre>
<code class="language-html">
    Example needed
</code>
</pre>
<h3>IClassDtos</h3>
<p>This option for DTOs allows you to create an arbitrary class that is related one-to-one with a POCO database class. The IClassDto provides the mechanism to create the DTO and update the underlying database object. The client ViewModels as build based on the DTO class and therefore can be significantly modified from the original. These support full list and editing capability with a complete set of views: list, cards, create/edit.</p>
<p>
    Note: Because DTOs of this type are updatable, a primary key must be used. Select the same primary key name as the underlying object for this to be detected automatically. 
</p>
<p>
    The Update method passes in a database object for you to update. You can do security trimming with the user and get Includes information from the includes parameter.
</p>
<p>
    The CreateInstance method creates the DTO from the database object. Again you have the user and includes properties. However, this time you also ahve a collection of objects. The purpose of this object is to track what has already been serialized. This same interface is used for the automatically generated DTOs. This serves two purposes.
    <ul>
        <li>A way to only transform objects once and then reuse the results where the object is referenced again.</li>
        <li>A way to prevent recursion when transforming from the database objects to the DTOs.</li>
    </ul>
    The collection is keyed by the original object and the value is the DTO.
</p>
<p>
    To get Coalesce to recognize the DTO, it must be added to the context as an IEnumerable. This is simply an indicator for Coalesce and does not impact the database. This may be replaced by other less obtrusive methods in the future.
</p>
<p>
    ListDataSource is supported from the POCO database object, but it transfered to the DTO. All querying must be done on the original object and not the DTO since only fields in the database can be queried via Entity Framework.
</p>
<pre>
<code class="language-html">
    public IEnumerable&lt;CaseDto&gt; CaseDtos { get; set; }
</code>
</pre>
<p>
    Methods are not yet supported on DTOs.
</p>
<pre>
<code class="language-html">
    public class CaseDto: IClassDto&lt;Case, CaseDto&gt;
    {
        [Key]
        public int CaseId { get; set; }
        public string Title { get; set; }
        [ReadOnly(true)]
        public string AssignedToName { get; set; }
        public void Update(Case obj, ClaimsPrincipal user, string includes)
        {
            obj.Title = Title;
        }
        public CaseDto CreateInstance(Case obj, ClaimsPrincipal user = null, string includes = null, Dictionary&lt;object, object&gt; objects = null, IncludeTree tree = null)
        {
            var dto = new CaseDto();
            dto.CaseId = obj.CaseKey;
            dto.Title = obj.Title;
            if (obj.AssignedTo != null)
            {
                dto.AssignedToName = obj.AssignedTo.Name;
            }
            return dto;
        }
    }
        
</code>
</pre>
<h3>IncludeTree</h3>
<p>
    When a DTO is created by one of the API methods that Coalesce provides, such as List, CustomList, Save, or Get, the CreateInstance method will be passed an IncludeTree object.
    This object represents all of EntityFramework .Include() calls that have been made against the source IQueryable that will apply to the children of the object that the DTO is being constructed for.
    The purpose of this is so that only DTOs that line up with the structure of the .Include() calls are created, thus avoiding circular references which can cause the size of serialized output to balloon out of control.
    To see how this is used in practice, take a look at one of the generated DTOs in the Models folder of your web project. If no IncludeTree is given, circular references will be reconstructed as they exist among the source entities.
    IncludeTrees only apply to objects and properties that exist in the database.
</p>
<h3>Database Views</h3>
<p>
    A view can manually be created in the database that will map to a regular POCO object. The typical approach is to create a POCO that has all the desired fields. Build an EF migration for this POCO, but don't apply it to the database. Replace the generated migration code with the code to generate/remove the view instead. This will all the view to be automatically created. This approach is ideal for situations where you want to filter at the database level on calculated fields. Be wary of unintentionally creating views that are read-only. This is fine, but the data will not be updatable like it is with a regular table based POCO. 
</p>

