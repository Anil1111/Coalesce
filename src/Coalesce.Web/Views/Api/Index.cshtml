@using Intellitect.ComponentModel.DataAnnotations
@using Intellitect.ComponentModel.Models
@using Intellitect.ComponentModel.Utilities
@using Intellitect.ComponentModel.Helpers
@using Intellitect.ComponentModel.TypeDefinition

@model Intellitect.ComponentModel.TypeDefinition.ClassViewModel
@{ 
    ClassViewModel model = Model;
}

<div class="panel panel-default">
    <div class="panel-heading">
        <div class="btn-group pull-right">
            <a href="~/@(model.ControllerName)/CreateEdit?@(ViewBag.Query)" role="button" class="btn btn-sm btn-default ">Create</a>
            <button data-bind="click:load" class="btn btn-sm btn-default ">Refresh</button>
            @if (ViewBag.Editable)
            {
                <a href="~/@(model.ControllerName)/Table?@(ViewBag.Query)" role="button" class="btn btn-sm btn-default ">Read-only</a>
            }
            else
            {
                <a href="~/@(model.ControllerName)/TableEdit?@ViewBag.Query" role="button" class="btn btn-sm btn-default ">Editable</a>
            }
        </div>
        <h1 style="display:inline-block">
            @(model.Name.ToProperCase()) List
            <span style="font-size: .5em;"><a href="~/@(model.ControllerName)/Docs">Docs</a></span>
        </h1>
        <span class="label label-info" data-bind="fadeVisible: isLoading()">Loading...</span>
        <div>
            <div style="display:inline-block; font-size: 1.1em; margin-right: 10px;">
                <i class="fa fa-arrow-circle-left" data-bind="enabled: previousPageEnabled(), click: previousPage"></i>
                Page
                <span data-bind="text: page"></span>
                of
                <span data-bind="text: pageCount"></span>
                <i class="fa fa-arrow-circle-right" data-bind="enabled: nextPageEnabled(), click: nextPage"></i>
            </div>
            <select data-bind="value:pageSize" class="form-control" style="width: 100px; display:inline-block">
                <option value="1">1</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="500">500</option>
                <option value="1000">1000</option>
                <option value="10000">10000</option>
            </select>
            <input class="form-control pull-right" style="width: 200px;" data-bind="textInput: search" placeholder="Search" />

        </div>

    </div>

    <table class="table table-striped @(ViewBag.Editable ? "editable": "")">
        <thead>
            <tr>
                @foreach (var prop in model.Properties.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsComplexType && f.SecurityInfo.IsReadable(User)))
                {
                    <th>@prop.DisplayName</th>
                }
                <th>
                </th>
            </tr>
        </thead>
        <tbody>
            <!-- ko foreach: items -->
            <tr>
                @foreach (var prop in model.Properties.Where(f => !f.IsHidden(HiddenAttribute.Areas.List) && !f.IsComplexType && f.SecurityInfo.IsReadable(User)))
                {
                    <td>
                        @Display.Property(prop, ViewBag.Editable && prop.SecurityInfo.IsEditable(User))
                    </td>
                }
                <td style="width: 80px;">
                    <span class="btn-group pull-right">
                        <a data-bind="attr:{ href: editUrl }" class="btn btn-sm btn-default">
                            <i class="fa fa-pencil"></i>
                        </a>
                        <button data-bind="click: deleteItemWithConfirmation" class="btn btn-sm btn-danger">
                            <i class="fa fa-remove"></i>
                        </button>
                    </span>
                </td>
            </tr>
            <!-- /ko -->
        </tbody>
    </table>
</div>

@if (model.Methods.Any(f => f.SecurityInfo.IsExecutable(User) && f.IsStatic))
{
<div class="panel panel-default">
    <div class="panel-heading">
        <h4>Actions</h4>
    </div>
    <div class="panel-body">
        <div class="form-group">
            <label class="col-md-3">Action</label>
            <label class="col-md-5">Result</label>
            <label class="col-md-2">Was Successful</label>
            <label class="col-md-2">Loading</label>
        </div>
        @foreach (MethodViewModel method in model.Methods.Where(f => f.SecurityInfo.IsExecutable(User) && f.IsStatic))
        {
            <div class="row">
            <div class="form-group form-horizontal">
                <div class="col-md-3">
                    <button class="btn btn-default" data-bind="click: @method.JsVariableUi">@method.Name.ToProperCase()</button>
                </div>
                <div class="col-md-5 control-label">
                    <span class="" data-bind="text: @method.JsVariableResult"></span>
                </div>
                <div class="col-md-2 control-label">
                    <span class="" data-bind="text: @method.JsVariableWasSuccessful"></span>
                    <span class="" data-bind="visible: @(method.JsVariableWasSuccessful)(), text: @method.JsVariableMessage"></span>
                </div>
                <div class="col-md-2 control-label">
                    <span class="label label-info" data-bind="fadeVisible: @(method.JsVariableIsLoading)()">Loading</span>
                </div>
            </div>
            </div>
        }

    </div>
</div>
}

@section Scripts
{

    <script>
        var @(model.ListViewModelObjectName) = new ListViewModels.@(model.ListViewModelClassName)();
        @if (ViewBag.ParentIdName != null)
        {
            @:@(model.ListViewModelObjectName).queryString = "@(ViewBag.ParentIdName)=@(ViewBag.ParentId)";
        }

        @(model.ListViewModelObjectName).isSavingAutomatically = false;
        ko.applyBindings(@(model.ListViewModelObjectName));
        @(model.ListViewModelObjectName).isSavingAutomatically = true;

        @(model.ListViewModelObjectName).includes = "Editor";
        @(model.ListViewModelObjectName).load();

    </script>
}
