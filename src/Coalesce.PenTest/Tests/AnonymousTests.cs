using Intellitect.ComponentModel.TypeDefinition;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Security.Claims;
using System.Security.Principal;
using System.Text;
using System.Threading.Tasks;

namespace Coalesce.PenTest.Tests
{
    public class AnonymousTests
    {
        private TestModel _model;
        private ClaimsPrincipal _anonUser;

        public AnonymousTests(TestModel model)
        {
            _model = model;
            _anonUser = new GenericPrincipal(new GenericIdentity("AnonUser"), new string[] { });
        }

        public async Task<bool> RunTests()
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = _model.ApiUrl;
                client.DefaultRequestHeaders.Accept.Clear();
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                var results = new List<bool>();

                results.Add(await RestrictedReadPropertiesViaPropertyValues(client));
                //results.Add(await RestrictedReadPropertiesViaListFields(client));
                results.Add(await RestrictedEditProperties(client));

                return results.All(b => b);
            }
        }

        private async Task<bool> RestrictedReadPropertiesViaPropertyValues(HttpClient client)
        {
            // Get a list of properties on anonmymous models that have read restrictions
            var models = _model.Models
                            .Where(m => m.SecurityInfo.AllowAnonymousEdit || m.SecurityInfo.AllowAnonymousRead)
                            .SelectMany(m => m.Properties
                                                .Where(p => !p.SecurityInfo.IsReadable(_anonUser))
                                                .Select(p => new { Model = m, Property = p }))
                            .ToList();

            var tasks = models
                        .Select(async m => await CheckPathForUnauthorizedResponse(client, $"{m.Model.ApiUrl}/propertyValues?property={m.Property.Name}"));
            var results = await Task.WhenAll(tasks);
            return results.All(b => b);
        }

        private async Task<bool> RestrictedEditProperties(HttpClient client)
        {
            // Get a list of properties on anonmymous models that have edit restrictions
            var models = _model.Models
                            .Where(m => m.SecurityInfo.AllowAnonymousEdit)
                            .SelectMany(m => m.Properties
                                                .Where(p => !p.SecurityInfo.IsEditable(_anonUser) && p.SecurityInfo.IsReadable(_anonUser))
                                                .Select(p => new { Model = m, Property = p }))
                            .ToList();

            var tasks = models
                        .Select(async m => await AttemptToChangeRestrictedProperty(client, m.Model, m.Property));
            var results = await Task.WhenAll(tasks);
            return results.All(b => b);
        }

        private async Task<bool> CheckPathForUnauthorizedResponse(HttpClient client, string apiPath)
        {
            using (var response = await client.GetAsync(apiPath))
            {
                return response.StatusCode == HttpStatusCode.Unauthorized || response.StatusCode == HttpStatusCode.InternalServerError;
                //if (response.IsSuccessStatusCode)
                //{
                //    using (var content = response.Content)
                //    {
                //        if (content != null)
                //        {
                //            string contents = await content.ReadAsStringAsync();
                //            dynamic data = JsonConvert.DeserializeObject<dynamic>(contents);
                //            bool ws = data.wasSuccessful;
                //            int tc = data.totalCount;
                //            _model.Logger.LogInformation($"{ws}: {tc}");
                //            //_model.Logger.LogInformation(data.First());
                //            //_model.Logger.LogInformation(contents);
                //            return true;
                //        }
                //    }
                //}
            }
        }

        private async Task<bool> AttemptToChangeRestrictedProperty(HttpClient client, ClassViewModel model, PropertyViewModel property)
        {
            // Get the first item and attempt to change the property
            dynamic list = await GetEntityList(client, model);
            var entity = list.list[0];
            string originalPropertyValue = ((IDictionary<string, object>)entity)[property.JsonName].ToString();
            ((IDictionary<string, object>)entity)[property.JsonName] = "Changed Value";

            string apiPath = $"{model.ApiUrl}/Save";

            var content = new StringContent(entity.ToString(), Encoding.UTF8, "application/json");
            await client.PostAsync(apiPath, content);

            // Get the first item again and make sure it hasn't changed
            list = await GetEntityList(client, model);
            entity = list.list[0];
            var propMatchesOriginal = ((IDictionary<string, object>)entity)[property.JsonName].ToString() == originalPropertyValue;
            return propMatchesOriginal;
        }

        private async Task<dynamic> GetEntityList(HttpClient client, ClassViewModel model, string fields = "", int page = 1, int pageSize = 10)
        {
            string apiPath = $"{model.ApiUrl}/List?page={page}&pageSize={pageSize}";
            if (!string.IsNullOrEmpty(fields)) apiPath += $"&fields={fields}";

            using (var response = await client.GetAsync(apiPath))
            {
                if (!response.IsSuccessStatusCode) return null;

                using (var content = response.Content)
                {
                    if (content != null)
                    {
                        string contents = await content.ReadAsStringAsync();
                        return JsonConvert.DeserializeObject<ExpandoObject>(contents);
                    }
                }
            }

            return null;
        }
    }
}
