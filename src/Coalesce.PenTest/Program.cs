using System;
using System.Linq;
using Microsoft.DotNet.ProjectModel;
using Microsoft.Extensions.CommandLineUtils;
using Intellitect.Extensions.CodeGenerators.Mvc.Scripts;
using Intellitect.Extensions.CodeGenerators.Mvc;
using Microsoft.VisualStudio.Web.CodeGeneration;
using Intellitect.ComponentModel.TypeDefinition;
using Microsoft.CodeAnalysis;
using System.IO;
using Coalesce.PenTest.Tests;
using Microsoft.Extensions.Logging;

namespace Coalesce.PenTest
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var app = new CommandLineApplication(false)
            {
                Name = "Coalesce.PenTest"
            };

            app.HelpOption("-h|--help");
            var dataContextOption = app.Option("-dc|--dataContext", "Data Context containing the classes to test.", CommandOptionType.SingleValue);
            var dataProjectOption = app.Option("-dp|--dataProject", "Relative path to the data project.", CommandOptionType.SingleValue);
            var apiUrl = app.Option("-api|--apiUrl", "API url for testing.", CommandOptionType.SingleValue);

            app.OnExecute(async () =>
            {
                // Required parameters
                if (!apiUrl.HasValue() || !dataContextOption.HasValue() || ! dataProjectOption.HasValue())
                {
                    throw new ArgumentNullException("apiUrl, dataContext, and dataProject are all required parameters.");
                }

                // Validate the API URL
                Uri uri = null;
                if (!Uri.TryCreate(apiUrl.Value(), UriKind.Absolute, out uri))
                {
                    throw new ArgumentException("apiUrl is not valid.");
                }

                // Find the data project
                ProjectContext dataContext = DependencyProvider.ProjectContext(dataProjectOption.Value());
                if (dataContext == null) throw new ArgumentException("Data project was not found.");

                // Find the data context and extract the models
                IModelTypesLocator typeLocator = DependencyProvider.ModelTypesLocator(dataContext);
                ModelType dataModel = ValidationUtil.ValidateType(dataContextOption.Value(), "dataContext", typeLocator, throwWhenNotFound: false);
                var models = ReflectionRepository
                                .AddContext((INamedTypeSymbol)dataModel.TypeSymbol)
                                .Where(m => m.PrimaryKey != null)
                                .ToList();

                using (StreamWriter streamWriter = new StreamWriter("results.txt", false))
                {
                    var model = new TestModel
                    {
                        Models = models,
                        ApiUrl = uri,
                        OutputFile = streamWriter,
                        Logger = (new LoggerFactory().AddConsole()).CreateLogger<Program>()
                    };

                    // Check for any issues from an anonymous user
                    var anonTests = new AnonymousTests(model);
                    var anonResults = await anonTests.RunTests();
                    if (!anonResults) throw new Exception("Anonymous tests failed.");
                }

                Console.ReadKey();

                return 0;
            });

            try
            {
                app.Execute(args);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.WriteLine(ex.StackTrace);
                if (ex.InnerException != null)
                {
                    Console.WriteLine(ex.InnerException.Message);
                    Console.WriteLine(ex.InnerException.StackTrace);
                }
            }
        }
    }
}
